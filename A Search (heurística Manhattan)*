#include <bits/stdc++.h>
using namespace std;
struct Node{int x,y,g,h;};
int main(){
    int n=5;
    vector<vector<int>> grid={{0,0,0,0,0},
                              {1,1,0,1,0},
                              {0,0,0,1,0},
                              {0,1,0,0,0},
                              {0,0,0,1,0}};
    pair<int,int> start={0,0}, goal={4,4};
    auto h=[&](int x,int y){ return abs(goal.first-x)+abs(goal.second-y); };
    priority_queue<tuple<int,int,int,int>,vector<tuple<int,int,int,int>>,greater<>> pq;
    pq.push({h(0,0),0,0,0});
    vector<vector<int>> vis(n,vector<int>(n,0));
    int dirs[4][2]={{1,0},{-1,0},{0,1},{0,-1}};
    while(!pq.empty()){
        auto [f,g,x,y]=pq.top(); pq.pop();
        if(vis[x][y]) continue;
        vis[x][y]=1;
        if(x==goal.first && y==goal.second){ cout<<"Camino encontrado, costo="<<g<<"\n"; return 0; }
        for(auto &d:dirs){
            int nx=x+d[0], ny=y+d[1];
            if(nx>=0&&ny>=0&&nx<n&&ny<n&&!grid[nx][ny]&&!vis[nx][ny])
                pq.push({g+1+h(nx,ny),g+1,nx,ny});
        }
    }
    cout<<"No hay camino.\n";
    return 0;
}
