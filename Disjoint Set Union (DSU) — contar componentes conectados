#include <bits/stdc++.h>
using namespace std;
struct DSU{
    vector<int> p, r;
    DSU(int n):p(n),r(n,0){ iota(p.begin(),p.end(),0); }
    int find(int x){ return p[x]==x?x:p[x]=find(p[x]); }
    void unite(int a,int b){
        a=find(a); b=find(b); if(a==b) return;
        if(r[a]<r[b]) swap(a,b);
        p[b]=a; if(r[a]==r[b]) r[a]++;
    }
};
int main(){
    int n=7;
    DSU d(n);
    vector<pair<int,int>> edges={{0,1},{1,2},{3,4},{5,6}};
    for(auto &e:edges) d.unite(e.first,e.second);
    unordered_set<int> comps;
    for(int i=0;i<n;i++) comps.insert(d.find(i));
    cout<<"Componentes conectados: "<<comps.size()<<"\n";
    return 0;
}
