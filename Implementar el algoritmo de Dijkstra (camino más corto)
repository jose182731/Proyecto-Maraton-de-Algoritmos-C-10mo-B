#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int,int> Par; // (distancia, nodo)

void dijkstra(int n, int inicio, vector<vector<Par>>& grafo){
    vector<int> dist(n, 1e9);
    dist[inicio] = 0;
    priority_queue<Par, vector<Par>, greater<Par>> pq;
    pq.push({0,inicio});

    while(!pq.empty()){
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if(d > dist[u]) continue;

        for(auto [v, peso] : grafo[u]){
            if(dist[u] + peso < dist[v]){
                dist[v] = dist[u] + peso;
                pq.push({dist[v], v});
            }
        }
    }

    for(int i=0;i<n;i++)
        cout << "Distancia desde " << inicio << " a " << i << ": " << dist[i] << endl;
}

int main(){
    int n = 5;
    vector<vector<Par>> grafo(n);
    grafo[0] = {{1,10},{2,3}};
    grafo[1] = {{2,1},{3,2}};
    grafo[2] = {{1,4},{3,8},{4,2}};
    grafo[3] = {{4,7}};
    grafo[4] = {{3,9}};

    dijkstra(n,0,grafo);
    return 0;
}
