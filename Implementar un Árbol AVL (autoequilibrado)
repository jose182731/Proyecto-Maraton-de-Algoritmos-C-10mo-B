#include <iostream>
using namespace std;

struct Nodo {
    int valor, altura;
    Nodo *izq, *der;
    Nodo(int v): valor(v), altura(1), izq(NULL), der(NULL){}
};

int altura(Nodo* n){ return n ? n->altura : 0; }
int balance(Nodo* n){ return altura(n->izq) - altura(n->der); }

Nodo* rotarDerecha(Nodo* y){
    Nodo* x = y->izq;
    Nodo* T2 = x->der;
    x->der = y; y->izq = T2;
    y->altura = max(altura(y->izq), altura(y->der)) + 1;
    x->altura = max(altura(x->izq), altura(x->der)) + 1;
    return x;
}

Nodo* rotarIzquierda(Nodo* x){
    Nodo* y = x->der;
    Nodo* T2 = y->izq;
    y->izq = x; x->der = T2;
    x->altura = max(altura(x->izq), altura(x->der)) + 1;
    y->altura = max(altura(y->izq), altura(y->der)) + 1;
    return y;
}

Nodo* insertar(Nodo* nodo, int valor){
    if(!nodo) return new Nodo(valor);
    if(valor < nodo->valor) nodo->izq = insertar(nodo->izq, valor);
    else if(valor > nodo->valor) nodo->der = insertar(nodo->der, valor);
    else return nodo;

    nodo->altura = 1 + max(altura(nodo->izq), altura(nodo->der));
    int bal = balance(nodo);

    if(bal > 1 && valor < nodo->izq->valor) return rotarDerecha(nodo);
    if(bal < -1 && valor > nodo->der->valor) return rotarIzquierda(nodo);
    if(bal > 1 && valor > nodo->izq->valor){ nodo->izq = rotarIzquierda(nodo->izq); return rotarDerecha(nodo);}
    if(bal < -1 && valor < nodo->der->valor){ nodo->der = rotarDerecha(nodo->der); return rotarIzquierda(nodo);}
    return nodo;
}

void inOrden(Nodo* n){
    if(!n) return;
    inOrden(n->izq);
    cout << n->valor << " ";
    inOrden(n->der);
}

int main(){
    Nodo* raiz=NULL;
    int datos[]={10,20,30,40,50,25};
    for(int v: datos) raiz = insertar(raiz,v);
    cout<<"Árbol AVL en orden: ";
    inOrden(raiz);
    return 0;
}
