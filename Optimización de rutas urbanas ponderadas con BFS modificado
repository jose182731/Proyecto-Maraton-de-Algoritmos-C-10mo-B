#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct Nodo {
    int id;
    int distancia;
};

void BFS_Ponderado(int inicio, vector<vector<pair<int,int>>>& ciudad) {
    int n = ciudad.size();
    vector<int> dist(n, -1);
    queue<Nodo> q;

    dist[inicio] = 0;
    q.push({inicio, 0});

    while(!q.empty()) {
        Nodo actual = q.front(); q.pop();
        for(auto &[vecino, peso] : ciudad[actual.id]) {
            int nueva_dist = dist[actual.id] + peso;
            if(dist[vecino] == -1 || nueva_dist < dist[vecino]) {
                dist[vecino] = nueva_dist;
                q.push({vecino, nueva_dist});
            }
        }
    }

    cout << "Distancias mÃ­nimas desde nodo " << inicio << ":\n";
    for(int i = 0; i < n; i++)
        cout << "Nodo " << i << " -> Distancia: " << dist[i] << endl;
}

int main() {
    vector<vector<pair<int,int>>> ciudad = {
        {{1,2},{2,5}}, // nodo 0
        {{0,2},{3,4}}, // nodo 1
        {{0,5},{3,1},{4,7}}, // nodo 2
        {{1,4},{2,1},{4,3}}, // nodo 3
        {{2,7},{3,3}} // nodo 4
    };

    BFS_Ponderado(0, ciudad);
    return 0;
}
