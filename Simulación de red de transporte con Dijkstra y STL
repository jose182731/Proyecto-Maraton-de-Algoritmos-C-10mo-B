#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef pair<int,int> Par;
#define INF 1e9

void dijkstra(vector<vector<Par>>& g,int origen){
    vector<int> dist(g.size(),INF);
    dist[origen]=0;
    priority_queue<Par,vector<Par>,greater<Par>> pq;
    pq.push({0,origen});

    while(!pq.empty()){
        int d=pq.top().first, u=pq.top().second;
        pq.pop();
        for(auto [v,peso]:g[u]){
            if(d+peso<dist[v]){
                dist[v]=d+peso;
                pq.push({dist[v],v});
            }
        }
    }

    cout<<"Distancia mÃ­nima desde "<<origen<<":\n";
    for(int i=0;i<dist.size();i++) cout<<i<<": "<<dist[i]<<endl;
}

int main(){
    int n=5;
    vector<vector<Par>> g(n);
    g[0]={{1,2},{2,4}};
    g[1]={{2,1},{3,7}};
    g[2]={{4,3}};
    g[3]={{4,1}};
    g[4]={};
    dijkstra(g,0);
    return 0;
}
