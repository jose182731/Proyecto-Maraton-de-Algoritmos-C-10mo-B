#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef pair<int,int> Par;
#define INF 1e9

void dijkstra(vector<vector<Par>>& grafo, int origen){
    vector<int> dist(grafo.size(),INF);
    dist[origen]=0;
    priority_queue<Par, vector<Par>, greater<Par>> pq;
    pq.push({0,origen});

    while(!pq.empty()){
        int d=pq.top().first, u=pq.top().second;
        pq.pop();
        for(auto [v,peso]:grafo[u]){
            if(d+peso<dist[v]){
                dist[v]=d+peso;
                pq.push({dist[v],v});
            }
        }
    }

    cout<<"Distancia mínima desde la estación "<<origen<<":\n";
    for(int i=0;i<dist.size();i++)
        cout<<"Nodo "<<i<<": "<<dist[i]<<endl;
}

int main(){
    int n=5;
    vector<vector<Par>> grafo(n);
    grafo[0]={{1,10},{2,5}};
    grafo[1]={{2,2},{3,1}};
    grafo[2]={{1,3},{3,9},{4,2}};
    grafo[3]={{4,4}};
    grafo[4]={{0,7},{3,6}};

    dijkstra(grafo,0);
    return 0;
}
