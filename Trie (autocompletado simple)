#include <bits/stdc++.h>
using namespace std;
struct Trie{
    bool end=false;
    unordered_map<char,Trie*> nxt;
};
void insert(Trie* root, const string &s){
    Trie* cur=root;
    for(char c:s){ if(!cur->nxt[c]) cur->nxt[c]=new Trie(); cur=cur->nxt[c]; }
    cur->end=true;
}
bool startsWith(Trie* root, const string &pref){
    Trie* cur=root;
    for(char c:pref) if(!cur->nxt.count(c)) return false; else cur=cur->nxt[c];
    return true;
}
void collect(Trie* node, string &acc, vector<string>& out){
    if(node->end) out.push_back(acc);
    for(auto &p:node->nxt){
        acc.push_back(p.first);
        collect(p.second, acc, out);
        acc.pop_back();
    }
}
int main(){
    Trie* root=new Trie();
    vector<string> words={"apple","app","application","banana","band"};
    for(auto&w:words) insert(root,w);
    string prefix="app";
    if(startsWith(root,prefix)){
        Trie* cur=root; for(char c:prefix) cur=cur->nxt[c];
        string acc=prefix; vector<string> out; collect(cur,acc,out);
        cout<<"Sugerencias para '"<<prefix<<"':\n"; for(auto &s:out) cout<<s<<"\n";
    } else cout<<"No hay sugerencias.\n";
    return 0;
}
