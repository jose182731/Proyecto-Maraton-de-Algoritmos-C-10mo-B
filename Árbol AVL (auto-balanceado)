#include <bits/stdc++.h>
using namespace std;
struct Node{int val,h; Node* l; Node* r; Node(int v):val(v),h(1),l(NULL),r(NULL){}};
int height(Node* n){ return n?n->h:0; }
int balance(Node* n){ return n?height(n->l)-height(n->r):0; }
Node* rotR(Node* y){ Node* x=y->l; y->l=x->r; x->r=y; y->h=max(height(y->l),height(y->r))+1; x->h=max(height(x->l),height(x->r))+1; return x; }
Node* rotL(Node* x){ Node* y=x->r; x->r=y->l; y->l=x; x->h=max(height(x->l),height(x->r))+1; y->h=max(height(y->l),height(y->r))+1; return y; }
Node* insert(Node* n,int val){
    if(!n) return new Node(val);
    if(val<n->val) n->l=insert(n->l,val);
    else if(val>n->val) n->r=insert(n->r,val);
    else return n;
    n->h=max(height(n->l),height(n->r))+1;
    int b=balance(n);
    if(b>1 && val<n->l->val) return rotR(n);
    if(b<-1 && val>n->r->val) return rotL(n);
    if(b>1 && val>n->l->val){ n->l=rotL(n->l); return rotR(n); }
    if(b<-1 && val<n->r->val){ n->r=rotR(n->r); return rotL(n); }
    return n;
}
void inorder(Node* r){ if(!r) return; inorder(r->l); cout<<r->val<<" "; inorder(r->r); }
int main(){
    Node* root=NULL;
    vector<int> vals={10,20,30,40,50,25};
    for(int v:vals) root=insert(root,v);
    inorder(root);
    cout<<"\n";
    return 0;
}
